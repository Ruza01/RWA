(()=>{"use strict";var r=function(t,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])},r(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function n(r,t){var n,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(n=1,e&&(o=2&c[0]?e.return:c[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,c[1])).done)return o;switch(e=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,e=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(r,u)}catch(r){c=[6,r],e=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function e(r){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&r[t],e=0;if(n)return n.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&e>=r.length&&(r=void 0),{value:r&&r[e++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(r,t){var n="function"==typeof Symbol&&r[Symbol.iterator];if(!n)return r;var e,o,i=n.call(r),u=[];try{for(;(void 0===t||t-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(r){o={error:r}}finally{try{e&&!e.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function i(r,t,n){if(n||2===arguments.length)for(var e,o=0,i=t.length;o<i;o++)!e&&o in t||(e||(e=Array.prototype.slice.call(t,0,o)),e[o]=t[o]);return r.concat(e||Array.prototype.slice.call(t))}function u(r){return this instanceof u?(this.v=r,this):new u(r)}function c(r){return"function"==typeof r}function s(r){var t=r((function(r){Error.call(r),r.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var a=s((function(r){return function(t){r(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(r,t){return t+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function l(r,t){if(r){var n=r.indexOf(t);0<=n&&r.splice(n,1)}}var f=function(){function r(r){this.initialTeardown=r,this.closed=!1,this._parentage=null,this._finalizers=null}return r.prototype.unsubscribe=function(){var r,t,n,u,s;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var f=e(l),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(t){r={error:t}}finally{try{p&&!p.done&&(t=f.return)&&t.call(f)}finally{if(r)throw r.error}}else l.remove(this);var h=this.initialTeardown;if(c(h))try{h()}catch(r){s=r instanceof a?r.errors:[r]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var b=e(v),y=b.next();!y.done;y=b.next()){var m=y.value;try{d(m)}catch(r){s=null!=s?s:[],r instanceof a?s=i(i([],o(s)),o(r.errors)):s.push(r)}}}catch(r){n={error:r}}finally{try{y&&!y.done&&(u=b.return)&&u.call(b)}finally{if(n)throw n.error}}}if(s)throw new a(s)}},r.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)d(t);else{if(t instanceof r){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},r.prototype._hasParent=function(r){var t=this._parentage;return t===r||Array.isArray(t)&&t.includes(r)},r.prototype._addParent=function(r){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(r),t):t?[t,r]:r},r.prototype._removeParent=function(r){var t=this._parentage;t===r?this._parentage=null:Array.isArray(t)&&l(t,r)},r.prototype.remove=function(t){var n=this._finalizers;n&&l(n,t),t instanceof r&&t._removeParent(this)},r.EMPTY=((t=new r).closed=!0,t),r;var t}(),p=f.EMPTY;function h(r){return r instanceof f||r&&"closed"in r&&c(r.remove)&&c(r.add)&&c(r.unsubscribe)}function d(r){c(r)?r():r.unsubscribe()}var v={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(r,t){for(var n=[],e=2;e<arguments.length;e++)n[e-2]=arguments[e];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([r,t],o(n))):setTimeout.apply(void 0,i([r,t],o(n)))},clearTimeout:function(r){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(r)},delegate:void 0};function y(r){b.setTimeout((function(){var t=v.onUnhandledError;if(!t)throw r;t(r)}))}function m(){}var w=x("C",void 0,void 0);function x(r,t,n){return{kind:r,value:t,error:n}}var _=null;function S(r){if(v.useDeprecatedSynchronousErrorHandling){var t=!_;if(t&&(_={errorThrown:!1,error:null}),r(),t){var n=_,e=n.errorThrown,o=n.error;if(_=null,e)throw o}}else r()}var g=function(r){function n(t){var n=r.call(this)||this;return n.isStopped=!1,t?(n.destination=t,h(t)&&t.add(n)):n.destination=j,n}return t(n,r),n.create=function(r,t,n){return new I(r,t,n)},n.prototype.next=function(r){this.isStopped?A(function(r){return x("N",r,void 0)}(r),this):this._next(r)},n.prototype.error=function(r){this.isStopped?A(x("E",void 0,r),this):(this.isStopped=!0,this._error(r))},n.prototype.complete=function(){this.isStopped?A(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(r){this.destination.next(r)},n.prototype._error=function(r){try{this.destination.error(r)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(f),E=Function.prototype.bind;function O(r,t){return E.call(r,t)}var T=function(){function r(r){this.partialObserver=r}return r.prototype.next=function(r){var t=this.partialObserver;if(t.next)try{t.next(r)}catch(r){P(r)}},r.prototype.error=function(r){var t=this.partialObserver;if(t.error)try{t.error(r)}catch(r){P(r)}else P(r)},r.prototype.complete=function(){var r=this.partialObserver;if(r.complete)try{r.complete()}catch(r){P(r)}},r}(),I=function(r){function n(t,n,e){var o,i,u=r.call(this)||this;return c(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=e?e:void 0}:u&&v.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&O(t.next,i),error:t.error&&O(t.error,i),complete:t.complete&&O(t.complete,i)}):o=t,u.destination=new T(o),u}return t(n,r),n}(g);function P(r){var t;v.useDeprecatedSynchronousErrorHandling?(t=r,v.useDeprecatedSynchronousErrorHandling&&_&&(_.errorThrown=!0,_.error=t)):y(r)}function A(r,t){var n=v.onStoppedNotification;n&&b.setTimeout((function(){return n(r,t)}))}var j={closed:!0,next:m,error:function(r){throw r},complete:m},C="function"==typeof Symbol&&Symbol.observable||"@@observable";function k(r){return r}var z=function(){function r(r){r&&(this._subscribe=r)}return r.prototype.lift=function(t){var n=new r;return n.source=this,n.operator=t,n},r.prototype.subscribe=function(r,t,n){var e,o=this,i=(e=r)&&e instanceof g||function(r){return r&&c(r.next)&&c(r.error)&&c(r.complete)}(e)&&h(e)?r:new I(r,t,n);return S((function(){var r=o,t=r.operator,n=r.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(t){r.error(t)}},r.prototype.forEach=function(r,t){var n=this;return new(t=U(t))((function(t,e){var o=new I({next:function(t){try{r(t)}catch(r){e(r),o.unsubscribe()}},error:e,complete:t});n.subscribe(o)}))},r.prototype._subscribe=function(r){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(r)},r.prototype[C]=function(){return this},r.prototype.pipe=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];return(0===(n=r).length?k:1===n.length?n[0]:function(r){return n.reduce((function(r,t){return t(r)}),r)})(this);var n},r.prototype.toPromise=function(r){var t=this;return new(r=U(r))((function(r,n){var e;t.subscribe((function(r){return e=r}),(function(r){return n(r)}),(function(){return r(e)}))}))},r.create=function(t){return new r(t)},r}();function U(r){var t;return null!==(t=null!=r?r:v.Promise)&&void 0!==t?t:Promise}var D=s((function(r){return function(){r(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),M=function(r){function n(){var t=r.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,r),n.prototype.lift=function(r){var t=new N(this,this);return t.operator=r,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new D},n.prototype.next=function(r){var t=this;S((function(){var n,o;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=e(t.currentObservers),u=i.next();!u.done;u=i.next())u.value.next(r)}catch(r){n={error:r}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(r){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=r;for(var n=t.observers;n.length;)n.shift().error(r)}}))},n.prototype.complete=function(){var r=this;S((function(){if(r._throwIfClosed(),!r.isStopped){r.isStopped=!0;for(var t=r.observers;t.length;)t.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var r;return(null===(r=this.observers)||void 0===r?void 0:r.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),r.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(r){return this._throwIfClosed(),this._checkFinalizedStatuses(r),this._innerSubscribe(r)},n.prototype._innerSubscribe=function(r){var t=this,n=this,e=n.hasError,o=n.isStopped,i=n.observers;return e||o?p:(this.currentObservers=null,i.push(r),new f((function(){t.currentObservers=null,l(i,r)})))},n.prototype._checkFinalizedStatuses=function(r){var t=this,n=t.hasError,e=t.thrownError,o=t.isStopped;n?r.error(e):o&&r.complete()},n.prototype.asObservable=function(){var r=new z;return r.source=this,r},n.create=function(r,t){return new N(r,t)},n}(z),N=function(r){function n(t,n){var e=r.call(this)||this;return e.destination=t,e.source=n,e}return t(n,r),n.prototype.next=function(r){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,r)},n.prototype.error=function(r){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,r)},n.prototype.complete=function(){var r,t;null===(t=null===(r=this.destination)||void 0===r?void 0:r.complete)||void 0===t||t.call(r)},n.prototype._subscribe=function(r){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(r))&&void 0!==n?n:p},n}(M);function F(r){return function(t){if(function(r){return c(null==r?void 0:r.lift)}(t))return t.lift((function(t){try{return r(t,this)}catch(r){this.error(r)}}));throw new TypeError("Unable to lift unknown Observable type")}}function H(r,t,n,e,o){return new L(r,t,n,e,o)}var L=function(r){function n(t,n,e,o,i,u){var c=r.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=n?function(r){try{n(r)}catch(r){t.error(r)}}:r.prototype._next,c._error=o?function(r){try{o(r)}catch(r){t.error(r)}finally{this.unsubscribe()}}:r.prototype._error,c._complete=e?function(){try{e()}catch(r){t.error(r)}finally{this.unsubscribe()}}:r.prototype._complete,c}return t(n,r),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;r.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(g),Y=function(r){return r&&"number"==typeof r.length&&"function"!=typeof r};function R(r){return c(null==r?void 0:r.then)}function q(r){return c(r[C])}function B(r){return Symbol.asyncIterator&&c(null==r?void 0:r[Symbol.asyncIterator])}function G(r){return new TypeError("You provided "+(null!==r&&"object"==typeof r?"an invalid object":"'"+r+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var J="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function K(r){return c(null==r?void 0:r[J])}function Q(r){return function(r,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=n.apply(r,t||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(r){o[r]&&(e[r]=function(t){return new Promise((function(n,e){i.push([r,t,n,e])>1||s(r,t)}))})}function s(r,t){try{(n=o[r](t)).value instanceof u?Promise.resolve(n.value.v).then(a,l):f(i[0][2],n)}catch(r){f(i[0][3],r)}var n}function a(r){s("next",r)}function l(r){s("throw",r)}function f(r,t){r(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}(this,arguments,(function(){var t,e,o;return n(this,(function(n){switch(n.label){case 0:t=r.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(t.read())];case 3:return e=n.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function V(r){return c(null==r?void 0:r.getReader)}function W(r){if(r instanceof z)return r;if(null!=r){if(q(r))return i=r,new z((function(r){var t=i[C]();if(c(t.subscribe))return t.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Y(r))return o=r,new z((function(r){for(var t=0;t<o.length&&!r.closed;t++)r.next(o[t]);r.complete()}));if(R(r))return n=r,new z((function(r){n.then((function(t){r.closed||(r.next(t),r.complete())}),(function(t){return r.error(t)})).then(null,y)}));if(B(r))return X(r);if(K(r))return t=r,new z((function(r){var n,o;try{for(var i=e(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(r.next(c),r.closed)return}}catch(r){n={error:r}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}r.complete()}));if(V(r))return X(Q(r))}var t,n,o,i;throw G(r)}function X(r){return new z((function(t){(function(r,t){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=r[Symbol.asyncIterator];return n?n.call(r):(r=e(r),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=r[n]&&function(t){return new Promise((function(e,o){!function(r,t,n,e){Promise.resolve(e).then((function(t){r({value:t,done:n})}),t)}(e,o,(t=r[n](t)).done,t.value)}))}}}(r),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(s=i.value,t.next(s),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=n.sent(),u={error:a},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(r,t){function n(r){try{o(f.next(r))}catch(r){t(r)}}function e(r){try{o(f.throw(r))}catch(r){t(r)}}function o(t){var o;t.done?r(t.value):(o=t.value,o instanceof l?o:new l((function(r){r(o)}))).then(n,e)}o((f=f.apply(s,a||[])).next())}))})(r,t).catch((function(r){return t.error(r)}))}))}function Z(r,t,n,e,o){void 0===e&&(e=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?r.add(this.schedule(null,e)):this.unsubscribe()}),e);if(r.add(i),!o)return i}function $(r,t,n){return void 0===n&&(n=1/0),c(t)?$((function(n,e){return function(r,t){return F((function(t,n){var e=0;t.subscribe(H(n,(function(t){n.next(r.call(undefined,t,e++))})))}))}((function(r,o){return t(n,r,e,o)}))(W(r(n,e)))}),n):("number"==typeof t&&(n=t),F((function(t,e){return function(r,t,n,e,o,i,u,c){var s=[],a=0,l=0,f=!1,p=function(){!f||s.length||a||t.complete()},h=function(r){return a<e?d(r):s.push(r)},d=function(r){a++;var o=!1;W(n(r,l++)).subscribe(H(t,(function(r){t.next(r)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<e;)r=void 0,r=s.shift(),d(r);p()}catch(r){t.error(r)}var r})))};return r.subscribe(H(t,h,(function(){f=!0,p()}))),function(){}}(t,e,r,n)})))}var rr,tr,nr,er,or=new z((function(r){return r.complete()}));function ir(r){return r[r.length-1]}function ur(r,t){return void 0===t&&(t=0),F((function(n,e){n.subscribe(H(e,(function(n){return Z(e,r,(function(){return e.next(n)}),t)}),(function(){return Z(e,r,(function(){return e.complete()}),t)}),(function(n){return Z(e,r,(function(){return e.error(n)}),t)})))}))}function cr(r,t){return void 0===t&&(t=0),F((function(n,e){e.add(r.schedule((function(){return n.subscribe(e)}),t))}))}function sr(r,t){if(!r)throw new Error("Iterable cannot be null");return new z((function(n){Z(n,t,(function(){var e=r[Symbol.asyncIterator]();Z(n,t,(function(){e.next().then((function(r){r.done?n.complete():n.next(r.value)}))}),0,!0)}))}))}tr=new M,nr=new z((function(r){setInterval((function(){var t=Math.round(48*Math.random())+1;r.next("".concat(t))}),500)})),er=new z((function(r){setInterval((function(){var t=Math.round(48*Math.random())+1;r.next("".concat(t))}),500)})),function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var n=function(r){return(t=ir(r))&&c(t.schedule)?r.pop():void 0;var t}(r),e=function(r,t){return"number"==typeof ir(r)?r.pop():1/0}(r),o=r;return o.length?1===o.length?W(o[0]):function(r){return void 0===r&&(r=1/0),$(k,r)}(e)(function(r,t){return t?function(r,t){if(null!=r){if(q(r))return function(r,t){return W(r).pipe(cr(t),ur(t))}(r,t);if(Y(r))return function(r,t){return new z((function(n){var e=0;return t.schedule((function(){e===r.length?n.complete():(n.next(r[e++]),n.closed||this.schedule())}))}))}(r,t);if(R(r))return function(r,t){return W(r).pipe(cr(t),ur(t))}(r,t);if(B(r))return sr(r,t);if(K(r))return function(r,t){return new z((function(n){var e;return Z(n,t,(function(){e=r[J](),Z(n,t,(function(){var r,t,o;try{t=(r=e.next()).value,o=r.done}catch(r){return void n.error(r)}o?n.complete():n.next(t)}),0,!0)})),function(){return c(null==e?void 0:e.return)&&e.return()}}))}(r,t);if(V(r))return function(r,t){return sr(Q(r),t)}(r,t)}throw G(r)}(r,t):W(r)}(o,n)):or}(nr,er).pipe((rr=tr,F((function(r,t){W(rr).subscribe(H(t,(function(){return t.complete()}),m)),!t.closed&&r.subscribe(t)}))),(6,F((function(r,t){var n=0;r.subscribe(H(t,(function(r){++n<=6&&(t.next(r),6<=n&&t.complete())})))})))).subscribe((function(r){var t=document.querySelector(".active"),n=document.createElement("div");n.className="numberEl",n.textContent="".concat(r),t.appendChild(n)})),setTimeout((function(){tr.next(-1),tr.complete()}),5e3),document.addEventListener("DOMContentLoaded",(function(){var r;r=[],Array.from(Array(48).keys()).map((function(r){return document.getElementById("button".concat(r+1))})).forEach((function(t){t.addEventListener("click",(function(){t.style.backgroundColor="gray";var n=t.textContent;if(r.push(n),6==r.length)return console.log(r),r}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,